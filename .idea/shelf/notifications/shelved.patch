Index: app/src/main/AndroidManifest.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    package=\"com.example.uber\">\r\n    <!--\r\n         The ACCESS_COARSE/FINE_LOCATION permissions are not required to use\r\n         Google Maps Android API v2, but you must specify either coarse or fine\r\n         location permissions for the 'MyLocation' functionality.\r\n    -->\r\n    <uses-permission android:name=\"android.permission.ACCESS_FINE_LOCATION\" />\r\n    <uses-permission android:name=\"android.permission.ACCESS_COARSE_LOCATION\" />\r\n    <uses-permission android:name=\"android.permission.INTERNET\" />\r\n    <uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\" />\r\n\r\n    <application\r\n        android:allowBackup=\"true\"\r\n        android:icon=\"@mipmap/ic_launcher\"\r\n        android:label=\"@string/app_name\"\r\n        android:roundIcon=\"@mipmap/ic_launcher_round\"\r\n        android:supportsRtl=\"true\"\r\n        android:theme=\"@style/AppTheme\">\r\n        <activity android:name=\".DriverSettingsActivity\"></activity>\r\n        <activity android:name=\".CustomerSettingsActivity\" />\r\n        <activity android:name=\".CustomerMapActivity\" />\r\n        <!--\r\n             The API key for Google Maps-based APIs is defined as a string resource.\r\n             (See the file \"res/values/google_maps_api.xml\").\r\n             Note that the API key is linked to the encryption key used to sign the APK.\r\n             You need a different API key for each encryption key, including the release key that is used to\r\n             sign the APK for publishing.\r\n             You can define the keys for the debug and release targets in src/debug/ and src/release/.\r\n        -->\r\n        <meta-data\r\n            android:name=\"com.google.android.geo.API_KEY\"\r\n            android:value=\"@string/google_maps_key\" />\r\n\r\n        <activity\r\n            android:name=\".DriverMapActivity\"\r\n            android:label=\"@string/title_activity_driver_map\" />\r\n        <activity android:name=\".CustomerLoginActivity\" />\r\n        <activity android:name=\".DriverLoginActivity\" />\r\n        <activity android:name=\".MainActivity\">\r\n            <intent-filter>\r\n                <action android:name=\"android.intent.action.MAIN\" />\r\n\r\n                <category android:name=\"android.intent.category.LAUNCHER\" />\r\n            </intent-filter>\r\n        </activity>\r\n    </application>\r\n\r\n</manifest>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/AndroidManifest.xml	(revision a594b47fe77d3890d9ba4a4d3ec6ee7b1c3a0baa)
+++ app/src/main/AndroidManifest.xml	(date 1556968567033)
@@ -10,6 +10,7 @@
     <uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" />
     <uses-permission android:name="android.permission.INTERNET" />
     <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE" />
+    <uses-permission android:name="android.permission.VIBRATE" />
 
     <application
         android:allowBackup="true"
Index: app/src/main/res/layout/activity_customer_map.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<FrameLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"match_parent\"\r\n    tools:context=\".CustomerLoginActivity\">\r\n\r\n    <fragment\r\n        android:id=\"@+id/map\"\r\n        android:name=\"com.google.android.gms.maps.SupportMapFragment\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"match_parent\"/>\r\n\r\n    <RelativeLayout\r\n        android:layout_width=\"wrap_content\"\r\n        android:layout_height=\"wrap_content\">\r\n        <LinearLayout\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:id=\"@+id/buttons\"\r\n            android:orientation=\"vertical\">\r\n            <Button\r\n                android:layout_width=\"wrap_content\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:id=\"@+id/logout\"\r\n                android:text=\"logout\"/>\r\n\r\n            <Button\r\n\r\n                android:layout_gravity=\"right\"\r\n                android:layout_width=\"wrap_content\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:id=\"@+id/settings\"\r\n                android:text=\"Settings\"/>\r\n        </LinearLayout>\r\n\r\n        <android.support.v7.widget.CardView\r\n            android:layout_margin=\"120sp\"\r\n            android:background=\"@android:color/white\"\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"wrap_content\">\r\n            <fragment\r\n                android:id=\"@+id/place_autocomplete_fragment\"\r\n                android:name=\"com.google.android.libraries.places.compat.ui.PlaceAutocompleteFragment\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"wrap_content\" />\r\n        </android.support.v7.widget.CardView>\r\n    </RelativeLayout>\r\n\r\n    <LinearLayout\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:layout_gravity=\"bottom\"\r\n        android:orientation=\"vertical\">\r\n\r\n\r\n        <LinearLayout\r\n            android:id=\"@+id/driverInfo\"\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:layout_gravity=\"bottom\"\r\n            android:background=\"@android:color/white\"\r\n            android:orientation=\"horizontal\"\r\n            android:visibility=\"gone\">\r\n\r\n            <ImageView\r\n                android:id=\"@+id/driverProfileImage\"\r\n                android:layout_width=\"100sp\"\r\n                android:layout_height=\"100sp\"\r\n                android:padding=\"20sp\"\r\n                android:src=\"@mipmap/avatar\" />\r\n\r\n            <LinearLayout\r\n                android:layout_width=\"wrap_content\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:orientation=\"vertical\"\r\n                android:paddingLeft=\"40sp\">\r\n\r\n                <TextView\r\n                    android:id=\"@+id/driverName\"\r\n                    android:layout_width=\"wrap_content\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:paddingTop=\"20sp\"\r\n                    android:paddingBottom=\"10sp\" />\r\n\r\n                <TextView\r\n                    android:id=\"@+id/driverPhone\"\r\n                    android:layout_width=\"wrap_content\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:paddingTop=\"20sp\"\r\n                    android:paddingBottom=\"10sp\" />\r\n\r\n                <TextView\r\n                    android:id=\"@+id/driverCar\"\r\n                    android:layout_width=\"wrap_content\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:paddingTop=\"20sp\"\r\n                    android:paddingBottom=\"10sp\" />\r\n\r\n\r\n            </LinearLayout>\r\n\r\n        </LinearLayout>\r\n\r\n        <LinearLayout\r\n            android:background=\"@android:color/white\"\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:orientation=\"vertical\">\r\n\r\n\r\n            <RadioGroup\r\n                android:id=\"@+id/radioGroup\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:orientation=\"horizontal\">\r\n\r\n                <RadioButton\r\n                    android:id=\"@+id/UberX\"\r\n                    android:layout_width=\"wrap_content\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:text=\"UberX\" />\r\n\r\n                <RadioButton\r\n                    android:id=\"@+id/UberBlack\"\r\n                    android:layout_width=\"wrap_content\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:text=\"UberBlack\" />\r\n\r\n                <RadioButton\r\n                    android:id=\"@+id/UberXl\"\r\n                    android:layout_width=\"wrap_content\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:text=\"UberXl\" />\r\n            </RadioGroup>\r\n            <Button\r\n                android:id=\"@+id/request\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:layout_gravity=\"bottom\"\r\n                android:text=\"call Uber\" />\r\n\r\n\r\n        </LinearLayout>\r\n\r\n\r\n\r\n\r\n    </LinearLayout>\r\n\r\n\r\n</FrameLayout>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/activity_customer_map.xml	(revision a594b47fe77d3890d9ba4a4d3ec6ee7b1c3a0baa)
+++ app/src/main/res/layout/activity_customer_map.xml	(date 1556969587372)
@@ -24,6 +24,11 @@
                 android:layout_height="wrap_content"
                 android:id="@+id/logout"
                 android:text="logout"/>
+            <Button
+                android:layout_width="match_parent"
+                android:layout_height="match_parent"
+                android:onClick="demoHeadsUp"
+                android:text="Heads Up Notifications" />
 
             <Button
 
@@ -32,6 +37,7 @@
                 android:layout_height="wrap_content"
                 android:id="@+id/settings"
                 android:text="Settings"/>
+
         </LinearLayout>
 
         <android.support.v7.widget.CardView
Index: app/src/main/java/com/example/uber/CustomerLoginActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.uber;\r\n\r\nimport android.content.Intent;\r\nimport android.support.annotation.NonNull;\r\nimport android.support.v7.app.AppCompatActivity;\r\nimport android.os.Bundle;\r\nimport android.view.View;\r\nimport android.widget.Button;\r\nimport android.widget.EditText;\r\nimport android.widget.Toast;\r\n\r\nimport com.google.android.gms.tasks.OnCompleteListener;\r\nimport com.google.android.gms.tasks.Task;\r\nimport com.google.firebase.auth.AuthResult;\r\nimport com.google.firebase.auth.FirebaseAuth;\r\nimport com.google.firebase.auth.FirebaseUser;\r\nimport com.google.firebase.database.DatabaseReference;\r\nimport com.google.firebase.database.FirebaseDatabase;\r\n\r\npublic class CustomerLoginActivity extends AppCompatActivity {\r\n\r\n    private EditText mEmail, mPassword;\r\n    private Button mLogin, mRegistration;\r\n\r\n    private FirebaseAuth mAuth;\r\n    private FirebaseAuth.AuthStateListener firebaseAuthListener;\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_customer_login);\r\n\r\n        mAuth = FirebaseAuth.getInstance();\r\n\r\n        firebaseAuthListener = new FirebaseAuth.AuthStateListener() {\r\n            @Override\r\n            public void onAuthStateChanged(@NonNull FirebaseAuth firebaseAuth) {\r\n                FirebaseUser user = FirebaseAuth.getInstance().getCurrentUser();\r\n                if (user!=null){\r\n                    Intent intent = new Intent(CustomerLoginActivity.this, CustomerMapActivity.class);\r\n                    startActivity(intent);\r\n                    finish();\r\n                    return;\r\n                }\r\n            }\r\n        };\r\n\r\n        mEmail = (EditText)findViewById(R.id.email);\r\n        mPassword = (EditText)findViewById(R.id.password);\r\n\r\n        mLogin = (Button) findViewById(R.id.login);\r\n        mRegistration = (Button)findViewById(R.id.registration);\r\n\r\n        mRegistration.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                final String email = mEmail.getText().toString();\r\n                final String password = mPassword.getText().toString();\r\n                mAuth.createUserWithEmailAndPassword(email, password).addOnCompleteListener(CustomerLoginActivity.this, new OnCompleteListener<AuthResult>() {\r\n                    @Override\r\n                    public void onComplete(@NonNull Task<AuthResult> task) {\r\n                        if (!task.isSuccessful()){\r\n                            Toast.makeText(CustomerLoginActivity.this, \"Sign up error\", Toast.LENGTH_SHORT).show();\r\n                        } else {\r\n                            String user_id = mAuth.getCurrentUser().getUid();\r\n                            DatabaseReference current_user_db = FirebaseDatabase.getInstance().getReference().child(\"Users\").child(\"Customers\").child(user_id);\r\n                            current_user_db.setValue(true);\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        });\r\n\r\n        mLogin.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                final String email = mEmail.getText().toString();\r\n                final String password = mPassword.getText().toString();\r\n                mAuth.signInWithEmailAndPassword(email, password).addOnCompleteListener(CustomerLoginActivity.this, new OnCompleteListener<AuthResult>() {\r\n                    @Override\r\n                    public void onComplete(@NonNull Task<AuthResult> task) {\r\n                        if (!task.isSuccessful()){\r\n                            Toast.makeText(CustomerLoginActivity.this, \"Log in error\", Toast.LENGTH_SHORT).show();\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    @Override\r\n    protected void onStart() {\r\n        super.onStart();\r\n        mAuth.addAuthStateListener(firebaseAuthListener);\r\n    }\r\n\r\n    @Override\r\n    protected void onStop() {\r\n        super.onStop();\r\n        mAuth.removeAuthStateListener(firebaseAuthListener);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/uber/CustomerLoginActivity.java	(revision a594b47fe77d3890d9ba4a4d3ec6ee7b1c3a0baa)
+++ app/src/main/java/com/example/uber/CustomerLoginActivity.java	(date 1556970241093)
@@ -1,7 +1,13 @@
 package com.example.uber;
 
+import android.app.Notification;
+import android.app.NotificationManager;
+import android.app.PendingIntent;
 import android.content.Intent;
+import android.graphics.BitmapFactory;
 import android.support.annotation.NonNull;
+import android.support.v4.app.NotificationCompat;
+import android.support.v4.app.NotificationManagerCompat;
 import android.support.v7.app.AppCompatActivity;
 import android.os.Bundle;
 import android.view.View;
@@ -70,6 +76,8 @@
             }
         });
 
+
+
         mLogin.setOnClickListener(new View.OnClickListener() {
             @Override
             public void onClick(View v) {
@@ -98,4 +106,23 @@
         super.onStop();
         mAuth.removeAuthStateListener(firebaseAuthListener);
     }
+
+    public void demoHeadsUp(View view) {
+        //To be heads up , the process is the same but setPriority should be called with at leas
+        //PRIORITY_HIGHT , and the notification should use either sound or vibration
+        Intent intent = new Intent(CustomerLoginActivity.this, CustomerMapActivity.class);
+        PendingIntent pi = PendingIntent.getActivity(CustomerLoginActivity.this, 0, intent, 0);
+        Notification.Builder builder = new Notification.Builder(this);
+
+        builder.setContentTitle("Title")
+                .setContentText("the text")
+                .setSmallIcon(R.mipmap.ic_launcher)
+                .setLargeIcon(BitmapFactory.decodeResource(getResources(), R.mipmap.ic_launcher))
+                .setContentIntent(pi)
+                .setVibrate(new long[]{Notification.DEFAULT_VIBRATE})
+                .setPriority(Notification.PRIORITY_MAX); //requires API 16
+
+        NotificationManager notificationManager = (NotificationManager) getSystemService(NOTIFICATION_SERVICE);
+        notificationManager.notify(0, builder.build());
+    }
 }
Index: app/src/main/java/com/example/uber/CustomerMapActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.uber;\r\n\r\nimport android.Manifest;\r\nimport android.content.Intent;\r\nimport android.content.pm.PackageManager;\r\nimport android.location.Location;\r\nimport android.support.annotation.NonNull;\r\nimport android.support.annotation.Nullable;\r\nimport android.support.v4.app.ActivityCompat;\r\nimport android.support.v4.app.FragmentActivity;\r\nimport android.os.Bundle;\r\nimport android.util.Log;\r\nimport android.view.View;\r\nimport android.widget.Button;\r\nimport android.widget.ImageView;\r\nimport android.widget.LinearLayout;\r\nimport android.widget.RadioButton;\r\nimport android.widget.RadioGroup;\r\nimport android.widget.TextView;\r\n\r\nimport com.bumptech.glide.Glide;\r\nimport com.firebase.geofire.GeoFire;\r\nimport com.firebase.geofire.GeoLocation;\r\nimport com.firebase.geofire.GeoQuery;\r\nimport com.firebase.geofire.GeoQueryEventListener;\r\nimport com.google.android.gms.common.ConnectionResult;\r\nimport com.google.android.gms.common.api.GoogleApiClient;\r\nimport com.google.android.gms.common.api.Status;\r\nimport com.google.android.gms.location.LocationRequest;\r\nimport com.google.android.gms.location.LocationServices;\r\n\r\nimport com.google.android.gms.maps.CameraUpdateFactory;\r\nimport com.google.android.gms.maps.GoogleMap;\r\nimport com.google.android.gms.maps.OnMapReadyCallback;\r\nimport com.google.android.gms.maps.SupportMapFragment;\r\nimport com.google.android.gms.maps.model.BitmapDescriptorFactory;\r\nimport com.google.android.gms.maps.model.LatLng;\r\nimport com.google.android.gms.maps.model.Marker;\r\nimport com.google.android.gms.maps.model.MarkerOptions;\r\nimport com.google.firebase.auth.FirebaseAuth;\r\nimport com.google.firebase.database.DataSnapshot;\r\nimport com.google.firebase.database.DatabaseError;\r\nimport com.google.firebase.database.DatabaseReference;\r\nimport com.google.firebase.database.FirebaseDatabase;\r\nimport com.google.firebase.database.ValueEventListener;\r\n\r\nimport com.google.android.libraries.places.compat.Place;\r\nimport com.google.android.libraries.places.compat.ui.PlaceAutocompleteFragment;\r\nimport com.google.android.libraries.places.compat.ui.PlaceSelectionListener;\r\n\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Map;\r\n\r\npublic class CustomerMapActivity extends FragmentActivity implements OnMapReadyCallback, GoogleApiClient.ConnectionCallbacks, GoogleApiClient.OnConnectionFailedListener, com.google.android.gms.location.LocationListener {\r\n\r\n    private GoogleMap mMap;\r\n    GoogleApiClient mGoogleApiClient;\r\n    Location mLastLocation;\r\n    LocationRequest mLocationRequest;\r\n\r\n    private Button mLogout, mRequest, mSettings;\r\n\r\n    private LatLng pickupLocation;\r\n\r\n    private Boolean requestBol = false;\r\n\r\n    private Marker pickupMarker;\r\n\r\n    private String destination, requestService;\r\n\r\n    private LatLng destinationLatLng;\r\n\r\n    private LinearLayout mDriverInfo;\r\n\r\n    private ImageView mDriverProfileImage;\r\n\r\n    private TextView mDriverName, mDriverPhone, mDriverCar;\r\n\r\n    private RadioGroup mRadioGroup;\r\n\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_customer_map);\r\n        // Obtain the SupportMapFragment and get notified when the map is ready to be used.\r\n        SupportMapFragment mapFragment = (SupportMapFragment) getSupportFragmentManager()\r\n                .findFragmentById(R.id.map);\r\n        mapFragment.getMapAsync(this);\r\n\r\n        destinationLatLng = new LatLng(0.0, 0.0);\r\n\r\n        mDriverInfo = (LinearLayout) findViewById(R.id.driverInfo);\r\n\r\n        mDriverProfileImage = (ImageView) findViewById(R.id.driverProfileImage);\r\n\r\n        mDriverName = (TextView) findViewById(R.id.driverName);\r\n        mDriverPhone = (TextView) findViewById(R.id.driverPhone);\r\n        mDriverCar = (TextView) findViewById(R.id.driverCar);\r\n\r\n\r\n        mRadioGroup = (RadioGroup) findViewById(R.id.radioGroup);\r\n        mRadioGroup.check(R.id.UberX);\r\n\r\n\r\n        mLogout = (Button) findViewById(R.id.logout);\r\n        mRequest = (Button) findViewById(R.id.request);\r\n        mSettings = (Button) findViewById(R.id.settings);\r\n        mLogout.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                FirebaseAuth.getInstance().signOut();\r\n                Intent intent = new Intent(CustomerMapActivity.this, MainActivity.class);\r\n                startActivity(intent);\r\n                finish();\r\n                return;\r\n            }\r\n        });\r\n\r\n        mRequest.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                if (requestBol){\r\n                    endRide();\r\n\r\n\r\n                } else {\r\n                    int selectId = mRadioGroup.getCheckedRadioButtonId();\r\n\r\n                    final RadioButton radioButton = (RadioButton) findViewById(selectId);\r\n\r\n                    if (radioButton.getText() == null) {\r\n                        return;\r\n                    }\r\n\r\n                    requestService = radioButton.getText().toString();\r\n\r\n\r\n                    requestBol = true;\r\n                    String userId = FirebaseAuth.getInstance().getCurrentUser().getUid();\r\n\r\n                    DatabaseReference ref = FirebaseDatabase.getInstance().getReference(\"customerRequest\");\r\n                    GeoFire geoFire = new GeoFire(ref);\r\n                    geoFire.setLocation(userId, new GeoLocation(mLastLocation.getLatitude(), mLastLocation.getLongitude()));\r\n\r\n                    pickupLocation = new LatLng(mLastLocation.getLatitude(), mLastLocation.getLongitude());\r\n                    pickupMarker = mMap.addMarker(new MarkerOptions().position(pickupLocation).title(\"Pickup here\").icon(BitmapDescriptorFactory.fromResource(R.mipmap.placeholder)));\r\n\r\n                    mRequest.setText(\"Getting your driver...wait!\");\r\n\r\n                    getClosestDriver();\r\n                }\r\n            }\r\n        });\r\n        mSettings.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                Intent intent = new Intent(CustomerMapActivity.this, CustomerSettingsActivity.class);\r\n                startActivity(intent);\r\n                return;\r\n            }\r\n        });\r\n\r\n\r\n        PlaceAutocompleteFragment autocompleteFragment = (PlaceAutocompleteFragment)\r\n                getFragmentManager().findFragmentById(R.id.place_autocomplete_fragment);\r\n        autocompleteFragment.setOnPlaceSelectedListener(new PlaceSelectionListener() {\r\n            @Override\r\n            public void onPlaceSelected(Place place) {\r\n                destination = place.getName().toString();\r\n                destinationLatLng = place.getLatLng();\r\n            }\r\n\r\n            @Override\r\n            public void onError(Status status) {\r\n            }\r\n        });\r\n\r\n    }\r\n    private int radius = 1;\r\n    private Boolean driverFound = false;\r\n    private String driverFoundID;\r\n\r\n    GeoQuery geoQuery;\r\n    private void getClosestDriver() {\r\n        DatabaseReference driverLocation = FirebaseDatabase.getInstance().getReference().child(\"driversAvailable\");\r\n\r\n        GeoFire geoFire = new GeoFire(driverLocation);\r\n\r\n        geoQuery = geoFire.queryAtLocation(new GeoLocation(pickupLocation.latitude, pickupLocation.longitude), radius);\r\n        geoQuery.removeAllListeners();\r\n\r\n        geoQuery.addGeoQueryEventListener(new GeoQueryEventListener() {\r\n            @Override\r\n            public void onKeyEntered(String key, GeoLocation location) {\r\n                if (!driverFound && requestBol)\r\n                {\r\n                    DatabaseReference mCustomerDatabase = FirebaseDatabase.getInstance().getReference().child(\"Users\").child(\"Drivers\").child(key);\r\n                    mCustomerDatabase.addListenerForSingleValueEvent(new ValueEventListener() {\r\n                        @Override\r\n                        public void onDataChange(@NonNull DataSnapshot dataSnapshot) {\r\n                            if (dataSnapshot.exists() && dataSnapshot.getChildrenCount()>0){\r\n                                Map<String, Object> driverMap = (Map<String, Object>) dataSnapshot.getValue();\r\n                                if (driverFound){\r\n                                    return;\r\n                                }\r\n\r\n                                if (driverMap.get(\"service\").equals(requestService)) {\r\n                                    driverFound = true;\r\n                                    driverFoundID = dataSnapshot.getKey();\r\n\r\n                                    DatabaseReference driverRef = FirebaseDatabase.getInstance().getReference().child(\"Users\").child(\"Drivers\").child(driverFoundID).child(\"customerRequest\");\r\n                                    String customerId = FirebaseAuth.getInstance().getCurrentUser().getUid();\r\n                                    HashMap map = new HashMap();\r\n                                    map.put(\"customerRideId\", customerId);\r\n                                    map.put(\"destination\", destination);\r\n                                    map.put(\"destinationLat\", destinationLatLng.latitude);\r\n                                    map.put(\"destinationLng\", destinationLatLng.longitude);\r\n                                    driverRef.updateChildren(map);\r\n\r\n                                    getDriverLocation();\r\n                                    getDriverInfo();\r\n                                    getHasRideEnded();\r\n                                    mRequest.setText(\"Looking for Driver Location...\");\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        @Override\r\n                        public void onCancelled(@NonNull DatabaseError databaseError) {\r\n\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void onKeyExited(String key) {\r\n\r\n            }\r\n\r\n            @Override\r\n            public void onKeyMoved(String key, GeoLocation location) {\r\n\r\n            }\r\n\r\n            @Override\r\n            public void onGeoQueryReady() {\r\n                if (!driverFound)\r\n                {\r\n                    radius++;\r\n                    getClosestDriver();\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void onGeoQueryError(DatabaseError error) {\r\n\r\n            }\r\n        });\r\n    }\r\n\r\n    private Marker mDriverMarker;\r\n    private DatabaseReference driverLocationRef;\r\n    private ValueEventListener driverLocationRefListener;\r\n    private void getDriverLocation() {\r\n        driverLocationRef = FirebaseDatabase.getInstance().getReference().child(\"driversWorking\").child(driverFoundID).child(\"l\");\r\n        driverLocationRefListener = driverLocationRef.addValueEventListener(new ValueEventListener() {\r\n            @Override\r\n            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {\r\n                if (dataSnapshot.exists() && requestBol)\r\n                {\r\n                    List<Object> map = (List<Object>) dataSnapshot.getValue();\r\n                    double locationLat = 0;\r\n                    double locationLng = 0;\r\n                    mRequest.setText(\"Driver Found\");\r\n                    if (map.get(0) != null)\r\n                    {\r\n                        locationLat = Double.parseDouble(map.get(0).toString());\r\n                    }\r\n                    if (map.get(1) != null)\r\n                    {\r\n                        locationLng = Double.parseDouble(map.get(1).toString());\r\n                    }\r\n                    LatLng driverLatLng = new LatLng(locationLat, locationLng);\r\n                    if (mDriverMarker != null)\r\n                    {\r\n                        mDriverMarker.remove();\r\n                    }\r\n                    Location loc1 = new Location(\"\");\r\n                    loc1.setLatitude(pickupLocation.latitude);\r\n                    loc1.setLongitude(pickupLocation.longitude);\r\n\r\n                    Location loc2 = new Location(\"\");\r\n                    loc2.setLatitude(driverLatLng.latitude);\r\n                    loc2.setLongitude(driverLatLng.longitude);\r\n\r\n                    float distance = loc1.distanceTo(loc2);\r\n\r\n                    if (distance < 100) {\r\n                        mRequest.setText(\"Driver's here\");\r\n                    } else {\r\n                        mRequest.setText(\"Driver Found: \" + String.valueOf(distance));\r\n                    }\r\n\r\n                    mDriverMarker = mMap.addMarker(new MarkerOptions().position(driverLatLng).title(\"your driver\").icon(BitmapDescriptorFactory.fromResource(R.mipmap.car)));\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void onCancelled(@NonNull DatabaseError databaseError) {\r\n\r\n            }\r\n        });\r\n    }\r\n\r\n    private void getDriverInfo() {\r\n        mDriverInfo.setVisibility(View.VISIBLE);\r\n        DatabaseReference mCustomerDatabase = FirebaseDatabase.getInstance().getReference().child(\"Users\").child(\"Drivers\").child(driverFoundID);\r\n        mCustomerDatabase.addListenerForSingleValueEvent(new ValueEventListener() {\r\n            @Override\r\n            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {\r\n                if (dataSnapshot.exists() && dataSnapshot.getChildrenCount() > 0) {\r\n                    Map<String, Object> map = (Map<String, Object>) dataSnapshot.getValue();\r\n                    if (map.get(\"name\") != null) {\r\n                        mDriverName.setText(map.get(\"name\").toString());\r\n                    }\r\n                    if (map.get(\"phone\") != null) {\r\n                        mDriverPhone.setText(map.get(\"phone\").toString());\r\n                    }\r\n                    if (map.get(\"car\") != null) {\r\n                        mDriverCar.setText(map.get(\"car\").toString());\r\n                    }\r\n                    if (map.get(\"profileImageUrl\") != null) {\r\n                        Glide.with(getApplication()).load(map.get(\"profileImageUrl\").toString()).into(mDriverProfileImage);\r\n                    }\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void onCancelled(@NonNull DatabaseError databaseError) {\r\n            }\r\n        });\r\n    }\r\n\r\n    private DatabaseReference driveHasEndedRef;\r\n    private ValueEventListener driveHasEndedRefListener;\r\n\r\n    private void getHasRideEnded(){\r\n        driveHasEndedRef = FirebaseDatabase.getInstance().getReference().child(\"Users\").child(\"Drivers\").child(driverFoundID).child(\"customerRequest\").child(\"customerRideId\");\r\n        driveHasEndedRefListener = driveHasEndedRef.addValueEventListener(new ValueEventListener() {\r\n            @Override\r\n            public void onDataChange(DataSnapshot dataSnapshot) {\r\n                if(dataSnapshot.exists()){\r\n\r\n                } else {\r\n                    endRide();\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void onCancelled(DatabaseError databaseError) {\r\n            }\r\n        });\r\n    }\r\n\r\n    private void endRide(){\r\n        requestBol = false;\r\n        geoQuery.removeAllListeners();\r\n        driverLocationRef.removeEventListener(driverLocationRefListener);\r\n        driveHasEndedRef.removeEventListener(driveHasEndedRefListener);\r\n\r\n        if (driverFoundID != null) {\r\n            DatabaseReference driverRef = FirebaseDatabase.getInstance().getReference().child(\"Users\").child(\"Drivers\").child(driverFoundID).child(\"customerRequest\");\r\n            driverRef.removeValue();\r\n            driverFoundID = null;\r\n        }\r\n        driverFound = false;\r\n        radius = 1;\r\n        String userId = FirebaseAuth.getInstance().getCurrentUser().getUid();\r\n\r\n        DatabaseReference ref = FirebaseDatabase.getInstance().getReference(\"customerRequest\");\r\n        GeoFire geoFire = new GeoFire(ref);\r\n        geoFire.removeLocation(userId);\r\n\r\n        if (mDriverMarker != null) {\r\n            mDriverMarker.remove();\r\n        }\r\n\r\n        if (pickupMarker != null) {\r\n            pickupMarker.remove();\r\n        }\r\n\r\n\r\n        mRequest.setText(\"call Uber\");\r\n\r\n        mDriverInfo.setVisibility(View.GONE);\r\n        mDriverName.setText(\"\");\r\n        mDriverPhone.setText(\"\");\r\n        mDriverCar.setText(\"\");\r\n        mDriverProfileImage.setImageResource(R.mipmap.avatar);\r\n    }\r\n\r\n    @Override\r\n    public void onMapReady(GoogleMap googleMap) {\r\n        mMap = googleMap;\r\n\r\n        if (ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) {\r\n            return;\r\n        }\r\n        buildGoogleApiClient();\r\n        mMap.setMyLocationEnabled(true);\r\n    }\r\n\r\n    protected synchronized void buildGoogleApiClient() {\r\n        mGoogleApiClient = new GoogleApiClient.Builder(this)\r\n                .addConnectionCallbacks(this)\r\n                .addOnConnectionFailedListener(this)\r\n                .addApi(LocationServices.API)\r\n                .build();\r\n        mGoogleApiClient.connect();\r\n    }\r\n\r\n    @Override\r\n    public void onLocationChanged(Location location) {\r\n        mLastLocation = location;\r\n\r\n        LatLng latLng = new LatLng(location.getLatitude(), location.getLongitude());\r\n\r\n        mMap.moveCamera(CameraUpdateFactory.newLatLng(latLng));\r\n        mMap.animateCamera(CameraUpdateFactory.zoomTo(11));\r\n    }\r\n\r\n    @Override\r\n    public void onConnected(@Nullable Bundle bundle) {\r\n        mLocationRequest = new LocationRequest();\r\n        mLocationRequest.setInterval(1000);\r\n        mLocationRequest.setFastestInterval(1000);\r\n        mLocationRequest.setPriority(LocationRequest.PRIORITY_BALANCED_POWER_ACCURACY);\r\n\r\n        if (ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) {\r\n            return;\r\n        }\r\n        LocationServices.FusedLocationApi.requestLocationUpdates(mGoogleApiClient, mLocationRequest, this);\r\n    }\r\n\r\n    @Override\r\n    public void onConnectionSuspended(int i) {\r\n\r\n    }\r\n\r\n    @Override\r\n    public void onConnectionFailed(@NonNull ConnectionResult connectionResult) {\r\n\r\n    }\r\n\r\n    @Override\r\n    protected void onStop() {\r\n        super.onStop();\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/uber/CustomerMapActivity.java	(revision a594b47fe77d3890d9ba4a4d3ec6ee7b1c3a0baa)
+++ app/src/main/java/com/example/uber/CustomerMapActivity.java	(date 1556970116891)
@@ -1,14 +1,20 @@
 package com.example.uber;
 
 import android.Manifest;
+import android.app.Notification;
+import android.app.NotificationManager;
+import android.app.PendingIntent;
 import android.content.Intent;
 import android.content.pm.PackageManager;
+import android.graphics.BitmapFactory;
 import android.location.Location;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 import android.support.v4.app.ActivityCompat;
 import android.support.v4.app.FragmentActivity;
 import android.os.Bundle;
+import android.support.v4.app.NotificationCompat;
+import android.support.v4.app.NotificationManagerCompat;
 import android.util.Log;
 import android.view.View;
 import android.widget.Button;
@@ -178,6 +184,7 @@
         });
 
     }
+
     private int radius = 1;
     private Boolean driverFound = false;
     private String driverFoundID;
@@ -402,6 +409,25 @@
         mDriverProfileImage.setImageResource(R.mipmap.avatar);
     }
 
+    public void demoHeadsUp(View view) {
+        //To be heads up , the process is the same but setPriority should be called with at leas
+        //PRIORITY_HIGHT , and the notification should use either sound or vibration
+        Intent intent = new Intent(CustomerMapActivity.this, CustomerMapActivity.class);
+        PendingIntent pi = PendingIntent.getActivity(CustomerMapActivity.this, 0, intent, 0);
+        Notification.Builder builder = new Notification.Builder(this);
+
+        builder.setContentTitle("Title")
+                .setContentText("the text")
+                .setSmallIcon(R.mipmap.ic_launcher)
+                .setLargeIcon(BitmapFactory.decodeResource(getResources(), R.mipmap.ic_launcher))
+                .setContentIntent(pi)
+                .setVibrate(new long[]{Notification.DEFAULT_VIBRATE})
+                .setPriority(Notification.PRIORITY_MAX); //requires API 16
+
+        NotificationManager notificationManager = (NotificationManager) getSystemService(NOTIFICATION_SERVICE);
+        notificationManager.notify(0, builder.build());
+    }
+
     @Override
     public void onMapReady(GoogleMap googleMap) {
         mMap = googleMap;
