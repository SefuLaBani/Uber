Index: app/src/main/java/com/example/uber/DriverMapActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.uber;\r\n\r\nimport android.Manifest;\r\nimport android.content.Intent;\r\nimport android.content.pm.PackageManager;\r\nimport android.location.Location;\r\nimport android.location.LocationListener;\r\nimport android.support.annotation.NonNull;\r\nimport android.support.annotation.Nullable;\r\nimport android.support.v4.app.ActivityCompat;\r\nimport android.support.v4.app.FragmentActivity;\r\nimport android.os.Bundle;\r\nimport android.view.View;\r\nimport android.widget.Button;\r\nimport android.widget.ImageView;\r\nimport android.widget.LinearLayout;\r\nimport android.widget.TextView;\r\nimport android.widget.Toast;\r\n\r\nimport com.bumptech.glide.Glide;\r\nimport com.directions.route.AbstractRouting;\r\nimport com.directions.route.Route;\r\nimport com.directions.route.RouteException;\r\nimport com.directions.route.Routing;\r\nimport com.directions.route.RoutingListener;\r\nimport com.firebase.geofire.GeoFire;\r\nimport com.firebase.geofire.GeoLocation;\r\nimport com.google.android.gms.common.ConnectionResult;\r\nimport com.google.android.gms.common.api.GoogleApiClient;\r\nimport com.google.android.gms.location.LocationRequest;\r\nimport com.google.android.gms.location.LocationServices;\r\nimport com.google.android.gms.maps.CameraUpdateFactory;\r\nimport com.google.android.gms.maps.GoogleMap;\r\nimport com.google.android.gms.maps.OnMapReadyCallback;\r\nimport com.google.android.gms.maps.SupportMapFragment;\r\nimport com.google.android.gms.maps.model.BitmapDescriptor;\r\nimport com.google.android.gms.maps.model.BitmapDescriptorFactory;\r\nimport com.google.android.gms.maps.model.LatLng;\r\nimport com.google.android.gms.maps.model.Marker;\r\nimport com.google.android.gms.maps.model.MarkerOptions;\r\nimport com.google.android.gms.maps.model.Polyline;\r\nimport com.google.android.gms.maps.model.PolylineOptions;\r\nimport com.google.firebase.auth.FirebaseAuth;\r\nimport com.google.firebase.database.DataSnapshot;\r\nimport com.google.firebase.database.DatabaseError;\r\nimport com.google.firebase.database.DatabaseReference;\r\nimport com.google.firebase.database.FirebaseDatabase;\r\nimport com.google.firebase.database.ValueEventListener;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.ListIterator;\r\nimport java.util.Map;\r\n\r\npublic class DriverMapActivity extends FragmentActivity implements OnMapReadyCallback, GoogleApiClient.ConnectionCallbacks, GoogleApiClient.OnConnectionFailedListener, com.google.android.gms.location.LocationListener, RoutingListener {\r\n\r\n\r\n    private GoogleMap mMap;\r\n    GoogleApiClient mGoogleApiClient;\r\n    Location mLastLocation;\r\n    LocationRequest mLocationRequest;\r\n\r\n    private Button mLogout, mSettings;\r\n\r\n    private String customerId = \"\";\r\n\r\n    private Boolean isLogginOut = false;\r\n\r\n    private SupportMapFragment mapFragment;\r\n\r\n    private LinearLayout mCustomerInfo;\r\n\r\n    private ImageView mCustomerProfileImage;\r\n\r\n    private TextView mCustomerName, mCustomerPhone, mCustomerDestination;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_driver_map);\r\n        polylines = new ArrayList<>();\r\n        // Obtain the SupportMapFragment and get notified when the map is ready to be used.\r\n        SupportMapFragment mapFragment = (SupportMapFragment) getSupportFragmentManager()\r\n                .findFragmentById(R.id.map);\r\n        mapFragment.getMapAsync(this);\r\n\r\n        mCustomerInfo = (LinearLayout) findViewById(R.id.customerInfo);\r\n\r\n        mCustomerProfileImage = (ImageView) findViewById(R.id.customerProfileImage);\r\n\r\n        mCustomerName = (TextView) findViewById(R.id.customerName);\r\n        mCustomerPhone = (TextView) findViewById(R.id.customerPhone);\r\n        mCustomerDestination = (TextView) findViewById(R.id.customerDestination);\r\n\r\n        mSettings = (Button) findViewById(R.id.settings);\r\n        mLogout = (Button) findViewById(R.id.logout);\r\n        mLogout.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                isLogginOut = true;\r\n\r\n                disconnectDriver();\r\n\r\n                FirebaseAuth.getInstance().signOut();\r\n                Intent intent = new Intent(DriverMapActivity.this, MainActivity.class);\r\n                startActivity(intent);\r\n                finish();\r\n                return;\r\n            }\r\n        });\r\n        mSettings.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                Intent intent = new Intent(DriverMapActivity.this, DriverSettingsActivity.class);\r\n                startActivity(intent);\r\n                finish();\r\n                return;\r\n            }\r\n        });\r\n\r\n        getAssignedCustomer();\r\n    }\r\n\r\n    private void getAssignedCustomer(){\r\n        String driverId = FirebaseAuth.getInstance().getCurrentUser().getUid();\r\n        final DatabaseReference assignedCustomerRef = FirebaseDatabase.getInstance().getReference().child(\"Users\").child(\"Drivers\").child(driverId).child(\"customerRequest\").child(\"customerRideId\");\r\n        assignedCustomerRef.addValueEventListener(new ValueEventListener() {\r\n            @Override\r\n            public void onDataChange(DataSnapshot dataSnapshot) {\r\n                if(dataSnapshot.exists()){\r\n                    customerId = dataSnapshot.getValue().toString();\r\n                    getAssignedCustomerPickupLocation();\r\n                    getAssignedCustomerDestination();\r\n                    getAssignedCustomerInfo();\r\n                } else {\r\n                    erasePolylines();\r\n                    customerId = \"\";\r\n                    if (pickupMarker != null) {\r\n                        pickupMarker.remove();\r\n                    }\r\n                    if (assignedCustomerPickupLocationRefListener != null) {\r\n                        assignedCustomerRef.removeEventListener(assignedCustomerPickupLocationRefListener);\r\n                    }\r\n                    mCustomerInfo.setVisibility(View.GONE);\r\n                    mCustomerName.setText(\"\");\r\n                    mCustomerPhone.setText(\"\");\r\n                    mCustomerDestination.setText(\"Destination: --\");\r\n                    mCustomerProfileImage.setImageResource(R.mipmap.avatar);\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void onCancelled(DatabaseError databaseError) {\r\n            }\r\n        });\r\n    }\r\n\r\n    Marker pickupMarker;\r\n    private DatabaseReference assignedCustomerPickupLocationRef;\r\n    private ValueEventListener assignedCustomerPickupLocationRefListener;\r\n    private void getAssignedCustomerPickupLocation() {\r\n        assignedCustomerPickupLocationRef = FirebaseDatabase.getInstance().getReference().child(\"customerRequest\").child(customerId).child(\"l\");\r\n        assignedCustomerPickupLocationRefListener = assignedCustomerPickupLocationRef.addValueEventListener(new ValueEventListener() {\r\n            @Override\r\n            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {\r\n                if (dataSnapshot.exists() && !customerId.equals(\"\")) {\r\n                    List<Object> map = (List<Object>) dataSnapshot.getValue();\r\n                    double locationLat = 0;\r\n                    double locationLng = 0;\r\n                    if (map.get(0) != null) {\r\n                        locationLat = Double.parseDouble(map.get(0).toString());\r\n                    }\r\n                    if (map.get(1) != null) {\r\n                        locationLng = Double.parseDouble(map.get(1).toString());\r\n                    }\r\n                    LatLng pickupLatLng = new LatLng(locationLat, locationLng);\r\n                    pickupMarker = mMap.addMarker(new MarkerOptions().position(pickupLatLng).title(\"pickup location\").icon(BitmapDescriptorFactory.fromResource(R.mipmap.placeholder)));\r\n                    getRouteToMarker(pickupLatLng);\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void onCancelled(@NonNull DatabaseError databaseError) {\r\n            }\r\n        });\r\n    }\r\n\r\n    private void getRouteToMarker(LatLng pickupLatLng){\r\n        Routing routing = new Routing.Builder()\r\n                .key(\"AIzaSyAbNhwXmmpQQhLJz4XeDLyW5UlJ99nSyL8\")\r\n                .travelMode(AbstractRouting.TravelMode.DRIVING)\r\n                .withListener(this)\r\n                .alternativeRoutes(false)\r\n                .waypoints(new LatLng(mLastLocation.getLatitude(), mLastLocation.getLongitude()), pickupLatLng)\r\n                .build();\r\n        routing.execute();\r\n    }\r\n\r\n    private void getAssignedCustomerDestination(){\r\n        String driverId = FirebaseAuth.getInstance().getCurrentUser().getUid();\r\n        final DatabaseReference assignedCustomerRef = FirebaseDatabase.getInstance().getReference().child(\"Users\").child(\"Drivers\").child(driverId).child(\"customerRequest\").child(\"destination\");\r\n        assignedCustomerRef.addListenerForSingleValueEvent(new ValueEventListener() {\r\n            @Override\r\n            public void onDataChange(DataSnapshot dataSnapshot) {\r\n                if(dataSnapshot.exists()){\r\n                    String destination = dataSnapshot.getValue().toString();\r\n                    mCustomerDestination.setText(\"Destination: \" + destination);\r\n                } else {\r\n                    mCustomerDestination.setText(\"Destination: --\");\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void onCancelled(DatabaseError databaseError) {\r\n            }\r\n        });\r\n    }\r\n\r\n    private void getAssignedCustomerInfo() {\r\n        mCustomerInfo.setVisibility(View.VISIBLE);\r\n        DatabaseReference mCustomerDatabase = FirebaseDatabase.getInstance().getReference().child(\"Users\").child(\"Customers\").child(customerId);\r\n        mCustomerDatabase.addListenerForSingleValueEvent(new ValueEventListener() {\r\n            @Override\r\n            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {\r\n                if (dataSnapshot.exists() && dataSnapshot.getChildrenCount() > 0) {\r\n                    Map<String, Object> map = (Map<String, Object>) dataSnapshot.getValue();\r\n                    if (map.get(\"name\") != null) {\r\n                        mCustomerName.setText(map.get(\"name\").toString());\r\n                    }\r\n                    if (map.get(\"phone\") != null) {\r\n                        mCustomerPhone.setText(map.get(\"phone\").toString());\r\n                    }\r\n                    if (map.get(\"profileImageUrl\") != null) {\r\n                        Glide.with(getApplication()).load(map.get(\"profileImageUrl\").toString()).into(mCustomerProfileImage);\r\n                    }\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void onCancelled(@NonNull DatabaseError databaseError) {\r\n            }\r\n        });\r\n    }\r\n\r\n    @Override\r\n    public void onMapReady(GoogleMap googleMap) {\r\n        mMap = googleMap;\r\n\r\n        if (ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) {\r\n            return;\r\n        }\r\n        buildGoogleApiClient();\r\n        mMap.setMyLocationEnabled(true);\r\n    }\r\n\r\n    protected synchronized void buildGoogleApiClient() {\r\n        mGoogleApiClient = new GoogleApiClient.Builder(this)\r\n                .addConnectionCallbacks(this)\r\n                .addOnConnectionFailedListener(this)\r\n                .addApi(LocationServices.API)\r\n                .build();\r\n        mGoogleApiClient.connect();\r\n    }\r\n\r\n    @Override\r\n    public void onLocationChanged(Location location) {\r\n        if (getApplicationContext() != null) {\r\n\r\n            mLastLocation = location;\r\n            LatLng latLng = new LatLng(location.getLatitude(), location.getLongitude());\r\n            mMap.moveCamera(CameraUpdateFactory.newLatLng(latLng));\r\n            mMap.animateCamera(CameraUpdateFactory.zoomTo(11));\r\n\r\n            String userId = FirebaseAuth.getInstance().getCurrentUser().getUid();\r\n            DatabaseReference refAvailable = FirebaseDatabase.getInstance().getReference(\"driversAvailable\");\r\n            DatabaseReference refWorking = FirebaseDatabase.getInstance().getReference(\"driversWorking\");\r\n            GeoFire geoFireAvailable = new GeoFire(refAvailable);\r\n            GeoFire geoFireWorking = new GeoFire(refWorking);\r\n\r\n\r\n            switch (customerId) {\r\n                case \"\":\r\n                    geoFireWorking.removeLocation(userId);\r\n                    geoFireAvailable.setLocation(userId, new GeoLocation(location.getLatitude(), location.getLongitude()));\r\n\r\n                    break;\r\n\r\n                default:\r\n                    geoFireAvailable.removeLocation(userId);\r\n                    geoFireWorking.setLocation(userId, new GeoLocation(location.getLatitude(), location.getLongitude()));\r\n                    break ;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    @Override\r\n    public void onConnected(@Nullable Bundle bundle) {\r\n        mLocationRequest = new LocationRequest();\r\n        mLocationRequest.setInterval(1000);\r\n        mLocationRequest.setFastestInterval(1000);\r\n        mLocationRequest.setPriority(LocationRequest.PRIORITY_BALANCED_POWER_ACCURACY);\r\n\r\n        if (ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) {\r\n            return;\r\n        }\r\n        LocationServices.FusedLocationApi.requestLocationUpdates(mGoogleApiClient, mLocationRequest, this);\r\n    }\r\n\r\n    @Override\r\n    public void onConnectionSuspended(int i) {\r\n\r\n    }\r\n\r\n    @Override\r\n    public void onConnectionFailed(@NonNull ConnectionResult connectionResult) {\r\n\r\n    }\r\n\r\n    private void disconnectDriver() {\r\n        LocationServices.FusedLocationApi.removeLocationUpdates(mGoogleApiClient, this);\r\n        String userId = FirebaseAuth.getInstance().getCurrentUser().getUid();\r\n        DatabaseReference ref = FirebaseDatabase.getInstance().getReference(\"driversAvailable\");\r\n\r\n        GeoFire geoFire = new GeoFire(ref);\r\n        geoFire.removeLocation(userId);\r\n    }\r\n\r\n    @Override\r\n    protected void onStop() {\r\n        super.onStop();\r\n        if (!isLogginOut) {\r\n            disconnectDriver();\r\n        }\r\n\r\n    }\r\n\r\n    private List<Polyline> polylines;\r\n    private static final int[] COLORS = new int[] {R.color.colorAccent};\r\n\r\n    @Override\r\n    public void onRoutingFailure(RouteException e) {\r\n        if (e != null) {\r\n            Toast.makeText(this, \"Error: \" + e.getMessage(), Toast.LENGTH_LONG).show();\r\n        } else {\r\n            Toast.makeText(this, \"Something went wrong, Try again\" + e.getMessage(), Toast.LENGTH_SHORT).show();\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onRoutingStart() {\r\n\r\n    }\r\n\r\n    @Override\r\n    public void onRoutingSuccess(ArrayList<Route> route, int shortestRouteIndex) {\r\n        if(polylines.size()>0) {\r\n            for (Polyline poly : polylines) {\r\n                poly.remove();\r\n            }\r\n        }\r\n\r\n        polylines = new ArrayList<>();\r\n        //add route(s) to the map.\r\n        for (int i = 0; i <route.size(); i++) {\r\n\r\n            //In case of more than 5 alternative routes\r\n            int colorIndex = i % COLORS.length;\r\n\r\n            PolylineOptions polyOptions = new PolylineOptions();\r\n            polyOptions.color(getResources().getColor(COLORS[colorIndex]));\r\n            polyOptions.width(10 + i * 3);\r\n            polyOptions.addAll(route.get(i).getPoints());\r\n            Polyline polyline = mMap.addPolyline(polyOptions);\r\n            polylines.add(polyline);\r\n\r\n            Toast.makeText(getApplicationContext(),\"Route \"+ (i+1) +\": distance - \"+ route.get(i).getDistanceValue()+\": duration - \"+ route.get(i).getDurationValue(),Toast.LENGTH_SHORT).show();\r\n        }\r\n\r\n    }\r\n    @Override\r\n    public void onRoutingCancelled() {\r\n    }\r\n    private void erasePolylines(){\r\n        for(Polyline line : polylines){\r\n            line.remove();\r\n        }\r\n        polylines.clear();\r\n    }\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/uber/DriverMapActivity.java	(revision 20d4cd5a4e4d2b6c44d37ff7c2c212b5cc6f04a9)
+++ app/src/main/java/com/example/uber/DriverMapActivity.java	(date 1556919029181)
@@ -60,9 +60,13 @@
     Location mLastLocation;
     LocationRequest mLocationRequest;
 
-    private Button mLogout, mSettings;
+    private Button mLogout, mSettings, mRideStatus;
+
+    private int status = 0;
 
-    private String customerId = "";
+    private String customerId = "", destination;
+
+    private LatLng destinationLatLng;
 
     private Boolean isLogginOut = false;
 
@@ -94,6 +98,27 @@
 
         mSettings = (Button) findViewById(R.id.settings);
         mLogout = (Button) findViewById(R.id.logout);
+        mRideStatus = (Button) findViewById(R.id.rideStatus);
+        mRideStatus.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                switch (status) {
+                    //drive OMW to pick customer
+                    case 1:
+                        status = 2;
+                        erasePolylines();
+                        if (destinationLatLng.latitude != 0.0 && destinationLatLng.longitude != 0.0) {
+                            getRouteToMarker(destinationLatLng);
+                        }
+                        mRideStatus.setText("drive completed");
+                        break;
+                        // driver it's going to destination with the customer
+                    case 2:
+                        endRide();
+                        break;
+                }
+            }
+        });
         mLogout.setOnClickListener(new View.OnClickListener() {
             @Override
             public void onClick(View v) {
@@ -128,24 +153,13 @@
             @Override
             public void onDataChange(DataSnapshot dataSnapshot) {
                 if(dataSnapshot.exists()){
+                    status = 1;
                     customerId = dataSnapshot.getValue().toString();
                     getAssignedCustomerPickupLocation();
                     getAssignedCustomerDestination();
                     getAssignedCustomerInfo();
                 } else {
-                    erasePolylines();
-                    customerId = "";
-                    if (pickupMarker != null) {
-                        pickupMarker.remove();
-                    }
-                    if (assignedCustomerPickupLocationRefListener != null) {
-                        assignedCustomerRef.removeEventListener(assignedCustomerPickupLocationRefListener);
-                    }
-                    mCustomerInfo.setVisibility(View.GONE);
-                    mCustomerName.setText("");
-                    mCustomerPhone.setText("");
-                    mCustomerDestination.setText("Destination: --");
-                    mCustomerProfileImage.setImageResource(R.mipmap.avatar);
+                    endRide();
                 }
             }
 
@@ -198,15 +212,28 @@
 
     private void getAssignedCustomerDestination(){
         String driverId = FirebaseAuth.getInstance().getCurrentUser().getUid();
-        final DatabaseReference assignedCustomerRef = FirebaseDatabase.getInstance().getReference().child("Users").child("Drivers").child(driverId).child("customerRequest").child("destination");
+        final DatabaseReference assignedCustomerRef = FirebaseDatabase.getInstance().getReference().child("Users").child("Drivers").child(driverId).child("customerRequest");
         assignedCustomerRef.addListenerForSingleValueEvent(new ValueEventListener() {
             @Override
             public void onDataChange(DataSnapshot dataSnapshot) {
                 if(dataSnapshot.exists()){
-                    String destination = dataSnapshot.getValue().toString();
-                    mCustomerDestination.setText("Destination: " + destination);
-                } else {
-                    mCustomerDestination.setText("Destination: --");
+                    Map<String, Object> map = (Map<String, Object>) dataSnapshot.getValue();
+                    if (map.get("destination") != null) {
+                        destination = map.get("destination").toString();
+                        mCustomerDestination.setText("Destination: " + destination);
+                    } else {
+                        mCustomerDestination.setText("Destination: --");
+                    }
+
+                    Double destinationLat = 0.0;
+                    Double destinationLng = 0.0;
+                    if (map.get("destinationLat") != null){
+                        destinationLat = Double.valueOf(map.get("destinationLat").toString());
+                    }
+                    if (map.get("destinationLng") != null){
+                        destinationLng = Double.valueOf(map.get("destinationLng").toString());
+                        destinationLatLng = new LatLng(destinationLat, destinationLng);
+                    }
                 }
             }
 
@@ -242,6 +269,32 @@
         });
     }
 
+    private void endRide(){
+        mRideStatus.setText("Customer Picked");
+        erasePolylines();
+
+        String userId = FirebaseAuth.getInstance().getCurrentUser().getUid();
+        DatabaseReference driverRef = FirebaseDatabase.getInstance().getReference().child("Users").child("Drivers").child(userId).child("customerRequest");
+        driverRef.removeValue();
+
+        DatabaseReference ref = FirebaseDatabase.getInstance().getReference("customerRequest");
+        GeoFire geoFire = new GeoFire(ref);
+        geoFire.removeLocation(customerId);
+        customerId = "";
+
+        if (pickupMarker != null) {
+            pickupMarker.remove();
+        }
+        if (assignedCustomerPickupLocationRefListener != null) {
+            assignedCustomerPickupLocationRef.removeEventListener(assignedCustomerPickupLocationRefListener);
+        }
+        mCustomerInfo.setVisibility(View.GONE);
+        mCustomerName.setText("");
+        mCustomerPhone.setText("");
+        mCustomerDestination.setText("Destination: --");
+        mCustomerProfileImage.setImageResource(R.mipmap.avatar);
+    }
+
     @Override
     public void onMapReady(GoogleMap googleMap) {
         mMap = googleMap;
Index: app/src/main/res/layout/activity_driver_map.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<FrameLayout\r\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"match_parent\"\r\n    tools:context=\".DriverMapActivity\">\r\n\r\n    <Button\r\n        android:layout_width=\"wrap_content\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:id=\"@+id/logout\"\r\n        android:text=\"logout\"/>\r\n    <Button\r\n        android:layout_gravity=\"end\"\r\n        android:layout_marginTop=\"40sp\"\r\n        android:layout_width=\"wrap_content\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:id=\"@+id/settings\"\r\n        android:text=\"Settings\"/>\r\n    <fragment\r\n    android:id=\"@+id/map\"\r\n    android:name=\"com.google.android.gms.maps.SupportMapFragment\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"match_parent\"/>\r\n    <LinearLayout\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:id=\"@+id/customerInfo\"\r\n        android:layout_gravity=\"bottom\"\r\n        android:orientation=\"horizontal\"\r\n        android:background=\"@android:color/white\"\r\n        android:visibility=\"gone\">\r\n        <ImageView\r\n            android:layout_width=\"100sp\"\r\n            android:layout_height=\"100sp\"\r\n            android:id=\"@+id/customerProfileImage\"\r\n            android:src=\"@mipmap/avatar\"\r\n            android:padding=\"20sp\"/>\r\n        <LinearLayout\r\n            android:layout_width=\"wrap_content\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:orientation=\"vertical\"\r\n            android:paddingLeft=\"40sp\">\r\n            <TextView\r\n                android:layout_width=\"wrap_content\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:id=\"@+id/customerDestination\"\r\n                android:paddingBottom=\"10sp\"\r\n                android:text=\"Destination: --\"/>\r\n            <TextView\r\n                android:layout_width=\"wrap_content\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:id=\"@+id/customerName\"\r\n                android:paddingBottom=\"10sp\"\r\n                android:paddingTop=\"20sp\"/>\r\n            <TextView\r\n                android:layout_width=\"wrap_content\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:id=\"@+id/customerPhone\"\r\n                android:paddingBottom=\"10sp\"\r\n                android:paddingTop=\"20sp\"/>\r\n\r\n        </LinearLayout>\r\n\r\n    </LinearLayout>\r\n</FrameLayout>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/activity_driver_map.xml	(revision 20d4cd5a4e4d2b6c44d37ff7c2c212b5cc6f04a9)
+++ app/src/main/res/layout/activity_driver_map.xml	(date 1556917330037)
@@ -28,40 +28,52 @@
         android:layout_height="wrap_content"
         android:id="@+id/customerInfo"
         android:layout_gravity="bottom"
-        android:orientation="horizontal"
+        android:orientation="vertical"
         android:background="@android:color/white"
-        android:visibility="gone">
-        <ImageView
-            android:layout_width="100sp"
-            android:layout_height="100sp"
-            android:id="@+id/customerProfileImage"
-            android:src="@mipmap/avatar"
-            android:padding="20sp"/>
-        <LinearLayout
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:orientation="vertical"
-            android:paddingLeft="40sp">
-            <TextView
-                android:layout_width="wrap_content"
-                android:layout_height="wrap_content"
-                android:id="@+id/customerDestination"
-                android:paddingBottom="10sp"
-                android:text="Destination: --"/>
-            <TextView
-                android:layout_width="wrap_content"
-                android:layout_height="wrap_content"
-                android:id="@+id/customerName"
-                android:paddingBottom="10sp"
-                android:paddingTop="20sp"/>
-            <TextView
-                android:layout_width="wrap_content"
-                android:layout_height="wrap_content"
-                android:id="@+id/customerPhone"
-                android:paddingBottom="10sp"
-                android:paddingTop="20sp"/>
+        android:visibility="visible">
+        <LinearLayout
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:orientation="horizontal">
+
+
+            <ImageView
+                android:layout_width="100sp"
+                android:layout_height="100sp"
+                android:id="@+id/customerProfileImage"
+                android:src="@mipmap/avatar"
+                android:padding="20sp"/>
+            <LinearLayout
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:orientation="vertical"
+                android:paddingLeft="40sp">
+                <TextView
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:id="@+id/customerDestination"
+                    android:paddingBottom="10sp"
+                    android:text="Destination: --"/>
+                <TextView
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:id="@+id/customerName"
+                    android:paddingBottom="10sp"
+                    android:paddingTop="20sp"/>
+                <TextView
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:id="@+id/customerPhone"
+                    android:paddingBottom="10sp"
+                    android:paddingTop="20sp"/>
 
+            </LinearLayout>
         </LinearLayout>
+        <Button
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:text="picked customer"
+            android:id="@+id/rideStatus"/>
 
     </LinearLayout>
 </FrameLayout>
\ No newline at end of file
Index: app/src/main/java/com/example/uber/CustomerMapActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.uber;\r\n\r\nimport android.Manifest;\r\nimport android.content.Intent;\r\nimport android.content.pm.PackageManager;\r\nimport android.location.Location;\r\nimport android.support.annotation.NonNull;\r\nimport android.support.annotation.Nullable;\r\nimport android.support.v4.app.ActivityCompat;\r\nimport android.support.v4.app.FragmentActivity;\r\nimport android.os.Bundle;\r\nimport android.util.Log;\r\nimport android.view.View;\r\nimport android.widget.Button;\r\nimport android.widget.ImageView;\r\nimport android.widget.LinearLayout;\r\nimport android.widget.RadioButton;\r\nimport android.widget.RadioGroup;\r\nimport android.widget.TextView;\r\n\r\nimport com.bumptech.glide.Glide;\r\nimport com.firebase.geofire.GeoFire;\r\nimport com.firebase.geofire.GeoLocation;\r\nimport com.firebase.geofire.GeoQuery;\r\nimport com.firebase.geofire.GeoQueryEventListener;\r\nimport com.google.android.gms.common.ConnectionResult;\r\nimport com.google.android.gms.common.api.GoogleApiClient;\r\nimport com.google.android.gms.common.api.Status;\r\nimport com.google.android.gms.location.LocationRequest;\r\nimport com.google.android.gms.location.LocationServices;\r\n\r\nimport com.google.android.gms.maps.CameraUpdateFactory;\r\nimport com.google.android.gms.maps.GoogleMap;\r\nimport com.google.android.gms.maps.OnMapReadyCallback;\r\nimport com.google.android.gms.maps.SupportMapFragment;\r\nimport com.google.android.gms.maps.model.BitmapDescriptorFactory;\r\nimport com.google.android.gms.maps.model.LatLng;\r\nimport com.google.android.gms.maps.model.Marker;\r\nimport com.google.android.gms.maps.model.MarkerOptions;\r\nimport com.google.firebase.auth.FirebaseAuth;\r\nimport com.google.firebase.database.DataSnapshot;\r\nimport com.google.firebase.database.DatabaseError;\r\nimport com.google.firebase.database.DatabaseReference;\r\nimport com.google.firebase.database.FirebaseDatabase;\r\nimport com.google.firebase.database.ValueEventListener;\r\n\r\nimport com.google.android.libraries.places.compat.Place;\r\nimport com.google.android.libraries.places.compat.ui.PlaceAutocompleteFragment;\r\nimport com.google.android.libraries.places.compat.ui.PlaceSelectionListener;\r\n\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Map;\r\n\r\npublic class CustomerMapActivity extends FragmentActivity implements OnMapReadyCallback, GoogleApiClient.ConnectionCallbacks, GoogleApiClient.OnConnectionFailedListener, com.google.android.gms.location.LocationListener {\r\n\r\n    private GoogleMap mMap;\r\n    GoogleApiClient mGoogleApiClient;\r\n    Location mLastLocation;\r\n    LocationRequest mLocationRequest;\r\n\r\n    private Button mLogout, mRequest, mSettings;\r\n\r\n    private LatLng pickupLocation;\r\n\r\n    private Boolean requestBol = false;\r\n\r\n    private Marker pickupMarker;\r\n\r\n    private String destination, requestService;\r\n\r\n    private LinearLayout mDriverInfo;\r\n\r\n    private ImageView mDriverProfileImage;\r\n\r\n    private TextView mDriverName, mDriverPhone, mDriverCar;\r\n\r\n    private RadioGroup mRadioGroup;\r\n\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_customer_map);\r\n        // Obtain the SupportMapFragment and get notified when the map is ready to be used.\r\n        SupportMapFragment mapFragment = (SupportMapFragment) getSupportFragmentManager()\r\n                .findFragmentById(R.id.map);\r\n        mapFragment.getMapAsync(this);\r\n\r\n        mDriverInfo = (LinearLayout) findViewById(R.id.driverInfo);\r\n\r\n        mDriverProfileImage = (ImageView) findViewById(R.id.driverProfileImage);\r\n\r\n        mDriverName = (TextView) findViewById(R.id.driverName);\r\n        mDriverPhone = (TextView) findViewById(R.id.driverPhone);\r\n        mDriverCar = (TextView) findViewById(R.id.driverCar);\r\n\r\n\r\n        mRadioGroup = (RadioGroup) findViewById(R.id.radioGroup);\r\n        mRadioGroup.check(R.id.UberX);\r\n\r\n\r\n        mLogout = (Button) findViewById(R.id.logout);\r\n        mRequest = (Button) findViewById(R.id.request);\r\n        mSettings = (Button) findViewById(R.id.settings);\r\n        mLogout.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                FirebaseAuth.getInstance().signOut();\r\n                Intent intent = new Intent(CustomerMapActivity.this, MainActivity.class);\r\n                startActivity(intent);\r\n                finish();\r\n                return;\r\n            }\r\n        });\r\n\r\n        mRequest.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                if (requestBol){\r\n                    requestBol = false;\r\n                    geoQuery.removeAllListeners();\r\n                    driverLocationRef.removeEventListener(driverLocationRefListener);\r\n\r\n                    if (driverFoundID != null) {\r\n                        DatabaseReference driverRef = FirebaseDatabase.getInstance().getReference().child(\"Users\").child(\"Drivers\").child(driverFoundID).child(\"customerRequest\");\r\n                        driverRef.removeValue();\r\n                        driverFoundID = null;\r\n                    }\r\n                    driverFound = false;\r\n                    radius = 1;\r\n                    String userId = FirebaseAuth.getInstance().getCurrentUser().getUid();\r\n\r\n                    DatabaseReference ref = FirebaseDatabase.getInstance().getReference(\"customerRequest\");\r\n                    GeoFire geoFire = new GeoFire(ref);\r\n                    geoFire.removeLocation(userId);\r\n\r\n                    if (mDriverMarker != null) {\r\n                        mDriverMarker.remove();\r\n                    }\r\n\r\n                    if (pickupMarker != null) {\r\n                        pickupMarker.remove();\r\n                    }\r\n\r\n\r\n                    mRequest.setText(\"call Uber\");\r\n\r\n                    mDriverInfo.setVisibility(View.GONE);\r\n                    mDriverName.setText(\"\");\r\n                    mDriverPhone.setText(\"\");\r\n                    mDriverCar.setText(\"\");\r\n                    mDriverProfileImage.setImageResource(R.mipmap.avatar);\r\n\r\n\r\n                } else {\r\n                    int selectId = mRadioGroup.getCheckedRadioButtonId();\r\n\r\n                    final RadioButton radioButton = (RadioButton) findViewById(selectId);\r\n\r\n                    if (radioButton.getText() == null) {\r\n                        return;\r\n                    }\r\n\r\n                    requestService = radioButton.getText().toString();\r\n\r\n\r\n                    requestBol = true;\r\n                    String userId = FirebaseAuth.getInstance().getCurrentUser().getUid();\r\n\r\n                    DatabaseReference ref = FirebaseDatabase.getInstance().getReference(\"customerRequest\");\r\n                    GeoFire geoFire = new GeoFire(ref);\r\n                    geoFire.setLocation(userId, new GeoLocation(mLastLocation.getLatitude(), mLastLocation.getLongitude()));\r\n\r\n                    pickupLocation = new LatLng(mLastLocation.getLatitude(), mLastLocation.getLongitude());\r\n                    pickupMarker = mMap.addMarker(new MarkerOptions().position(pickupLocation).title(\"Pickup here\").icon(BitmapDescriptorFactory.fromResource(R.mipmap.placeholder)));\r\n\r\n                    mRequest.setText(\"Getting your driver...wait!\");\r\n\r\n                    getClosestDriver();\r\n                }\r\n            }\r\n        });\r\n        mSettings.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                Intent intent = new Intent(CustomerMapActivity.this, CustomerSettingsActivity.class);\r\n                startActivity(intent);\r\n                return;\r\n            }\r\n        });\r\n\r\n\r\n            PlaceAutocompleteFragment autocompleteFragment = (PlaceAutocompleteFragment)\r\n                    getFragmentManager().findFragmentById(R.id.place_autocomplete_fragment);\r\n            autocompleteFragment.setOnPlaceSelectedListener(new PlaceSelectionListener() {\r\n                @Override\r\n                public void onPlaceSelected(Place place) {\r\n                    destination = place.getName().toString();\r\n                }\r\n\r\n                @Override\r\n                public void onError(Status status) {\r\n                }\r\n            });\r\n\r\n    }\r\n    private int radius = 1;\r\n    private Boolean driverFound = false;\r\n    private String driverFoundID;\r\n\r\n    GeoQuery geoQuery;\r\n    private void getClosestDriver() {\r\n        DatabaseReference driverLocation = FirebaseDatabase.getInstance().getReference().child(\"driversAvailable\");\r\n\r\n        GeoFire geoFire = new GeoFire(driverLocation);\r\n\r\n        geoQuery = geoFire.queryAtLocation(new GeoLocation(pickupLocation.latitude, pickupLocation.longitude), radius);\r\n        geoQuery.removeAllListeners();\r\n\r\n        geoQuery.addGeoQueryEventListener(new GeoQueryEventListener() {\r\n            @Override\r\n            public void onKeyEntered(String key, GeoLocation location) {\r\n                if (!driverFound && requestBol)\r\n                {\r\n                    DatabaseReference mCustomerDatabase = FirebaseDatabase.getInstance().getReference().child(\"Users\").child(\"Drivers\").child(key);\r\n                    mCustomerDatabase.addListenerForSingleValueEvent(new ValueEventListener() {\r\n                        @Override\r\n                        public void onDataChange(@NonNull DataSnapshot dataSnapshot) {\r\n                            if (dataSnapshot.exists() && dataSnapshot.getChildrenCount()>0){\r\n                                Map<String, Object> driverMap = (Map<String, Object>) dataSnapshot.getValue();\r\n                                if (driverFound){\r\n                                    return;\r\n                                }\r\n\r\n                                if (driverMap.get(\"service\").equals(requestService)) {\r\n                                    driverFound = true;\r\n                                    driverFoundID = dataSnapshot.getKey();\r\n\r\n                                    DatabaseReference driverRef = FirebaseDatabase.getInstance().getReference().child(\"Users\").child(\"Drivers\").child(driverFoundID).child(\"customerRequest\");\r\n                                    String customerId = FirebaseAuth.getInstance().getCurrentUser().getUid();\r\n                                    HashMap map = new HashMap();\r\n                                    map.put(\"customerRideId\", customerId);\r\n                                    map.put(\"destination\", destination);\r\n                                    driverRef.updateChildren(map);\r\n\r\n                                    getDriverLocation();\r\n                                    getDriverInfo();\r\n                                    mRequest.setText(\"Looking for Driver Location...\");\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        @Override\r\n                        public void onCancelled(@NonNull DatabaseError databaseError) {\r\n\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void onKeyExited(String key) {\r\n\r\n            }\r\n\r\n            @Override\r\n            public void onKeyMoved(String key, GeoLocation location) {\r\n\r\n            }\r\n\r\n            @Override\r\n            public void onGeoQueryReady() {\r\n                if (!driverFound)\r\n                {\r\n                    radius++;\r\n                    getClosestDriver();\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void onGeoQueryError(DatabaseError error) {\r\n\r\n            }\r\n        });\r\n    }\r\n\r\n    private Marker mDriverMarker;\r\n    private DatabaseReference driverLocationRef;\r\n    private ValueEventListener driverLocationRefListener;\r\n    private void getDriverLocation() {\r\n        driverLocationRef = FirebaseDatabase.getInstance().getReference().child(\"driversWorking\").child(driverFoundID).child(\"l\");\r\n        driverLocationRefListener = driverLocationRef.addValueEventListener(new ValueEventListener() {\r\n            @Override\r\n            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {\r\n                if (dataSnapshot.exists() && requestBol)\r\n                {\r\n                    List<Object> map = (List<Object>) dataSnapshot.getValue();\r\n                    double locationLat = 0;\r\n                    double locationLng = 0;\r\n                    mRequest.setText(\"Driver Found\");\r\n                    if (map.get(0) != null)\r\n                    {\r\n                        locationLat = Double.parseDouble(map.get(0).toString());\r\n                    }\r\n                    if (map.get(1) != null)\r\n                    {\r\n                        locationLng = Double.parseDouble(map.get(1).toString());\r\n                    }\r\n                    LatLng driverLatLng = new LatLng(locationLat, locationLng);\r\n                    if (mDriverMarker != null)\r\n                    {\r\n                        mDriverMarker.remove();\r\n                    }\r\n                    Location loc1 = new Location(\"\");\r\n                    loc1.setLatitude(pickupLocation.latitude);\r\n                    loc1.setLongitude(pickupLocation.longitude);\r\n\r\n                    Location loc2 = new Location(\"\");\r\n                    loc2.setLatitude(driverLatLng.latitude);\r\n                    loc2.setLongitude(driverLatLng.longitude);\r\n\r\n                    float distance = loc1.distanceTo(loc2);\r\n\r\n                    if (distance < 100) {\r\n                        mRequest.setText(\"Driver's here\");\r\n                    } else {\r\n                        mRequest.setText(\"Driver Found: \" + String.valueOf(distance));\r\n                    }\r\n\r\n                    mDriverMarker = mMap.addMarker(new MarkerOptions().position(driverLatLng).title(\"your driver\").icon(BitmapDescriptorFactory.fromResource(R.mipmap.car)));\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void onCancelled(@NonNull DatabaseError databaseError) {\r\n\r\n            }\r\n        });\r\n    }\r\n\r\n    private void getDriverInfo() {\r\n        mDriverInfo.setVisibility(View.VISIBLE);\r\n        DatabaseReference mCustomerDatabase = FirebaseDatabase.getInstance().getReference().child(\"Users\").child(\"Drivers\").child(driverFoundID);\r\n        mCustomerDatabase.addListenerForSingleValueEvent(new ValueEventListener() {\r\n            @Override\r\n            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {\r\n                if (dataSnapshot.exists() && dataSnapshot.getChildrenCount() > 0) {\r\n                    Map<String, Object> map = (Map<String, Object>) dataSnapshot.getValue();\r\n                    if (map.get(\"name\") != null) {\r\n                        mDriverName.setText(map.get(\"name\").toString());\r\n                    }\r\n                    if (map.get(\"phone\") != null) {\r\n                        mDriverPhone.setText(map.get(\"phone\").toString());\r\n                    }\r\n                    if (map.get(\"car\") != null) {\r\n                        mDriverCar.setText(map.get(\"car\").toString());\r\n                    }\r\n                    if (map.get(\"profileImageUrl\") != null) {\r\n                        Glide.with(getApplication()).load(map.get(\"profileImageUrl\").toString()).into(mDriverProfileImage);\r\n                    }\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void onCancelled(@NonNull DatabaseError databaseError) {\r\n            }\r\n        });\r\n    }\r\n\r\n    @Override\r\n    public void onMapReady(GoogleMap googleMap) {\r\n        mMap = googleMap;\r\n\r\n        if (ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) {\r\n            return;\r\n        }\r\n        buildGoogleApiClient();\r\n        mMap.setMyLocationEnabled(true);\r\n    }\r\n\r\n    protected synchronized void buildGoogleApiClient() {\r\n        mGoogleApiClient = new GoogleApiClient.Builder(this)\r\n                .addConnectionCallbacks(this)\r\n                .addOnConnectionFailedListener(this)\r\n                .addApi(LocationServices.API)\r\n                .build();\r\n        mGoogleApiClient.connect();\r\n    }\r\n\r\n    @Override\r\n    public void onLocationChanged(Location location) {\r\n        mLastLocation = location;\r\n\r\n        LatLng latLng = new LatLng(location.getLatitude(), location.getLongitude());\r\n\r\n        mMap.moveCamera(CameraUpdateFactory.newLatLng(latLng));\r\n        mMap.animateCamera(CameraUpdateFactory.zoomTo(11));\r\n    }\r\n\r\n    @Override\r\n    public void onConnected(@Nullable Bundle bundle) {\r\n        mLocationRequest = new LocationRequest();\r\n        mLocationRequest.setInterval(1000);\r\n        mLocationRequest.setFastestInterval(1000);\r\n        mLocationRequest.setPriority(LocationRequest.PRIORITY_BALANCED_POWER_ACCURACY);\r\n\r\n        if (ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) {\r\n            return;\r\n        }\r\n        LocationServices.FusedLocationApi.requestLocationUpdates(mGoogleApiClient, mLocationRequest, this);\r\n    }\r\n\r\n    @Override\r\n    public void onConnectionSuspended(int i) {\r\n\r\n    }\r\n\r\n    @Override\r\n    public void onConnectionFailed(@NonNull ConnectionResult connectionResult) {\r\n\r\n    }\r\n\r\n    @Override\r\n    protected void onStop() {\r\n        super.onStop();\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/uber/CustomerMapActivity.java	(revision 20d4cd5a4e4d2b6c44d37ff7c2c212b5cc6f04a9)
+++ app/src/main/java/com/example/uber/CustomerMapActivity.java	(date 1556916912352)
@@ -69,6 +69,8 @@
 
     private String destination, requestService;
 
+    private LatLng destinationLatLng;
+
     private LinearLayout mDriverInfo;
 
     private ImageView mDriverProfileImage;
@@ -87,6 +89,8 @@
                 .findFragmentById(R.id.map);
         mapFragment.getMapAsync(this);
 
+        destinationLatLng = new LatLng(0.0, 0.0);
+
         mDriverInfo = (LinearLayout) findViewById(R.id.driverInfo);
 
         mDriverProfileImage = (ImageView) findViewById(R.id.driverProfileImage);
@@ -118,39 +122,7 @@
             @Override
             public void onClick(View v) {
                 if (requestBol){
-                    requestBol = false;
-                    geoQuery.removeAllListeners();
-                    driverLocationRef.removeEventListener(driverLocationRefListener);
-
-                    if (driverFoundID != null) {
-                        DatabaseReference driverRef = FirebaseDatabase.getInstance().getReference().child("Users").child("Drivers").child(driverFoundID).child("customerRequest");
-                        driverRef.removeValue();
-                        driverFoundID = null;
-                    }
-                    driverFound = false;
-                    radius = 1;
-                    String userId = FirebaseAuth.getInstance().getCurrentUser().getUid();
-
-                    DatabaseReference ref = FirebaseDatabase.getInstance().getReference("customerRequest");
-                    GeoFire geoFire = new GeoFire(ref);
-                    geoFire.removeLocation(userId);
-
-                    if (mDriverMarker != null) {
-                        mDriverMarker.remove();
-                    }
-
-                    if (pickupMarker != null) {
-                        pickupMarker.remove();
-                    }
-
-
-                    mRequest.setText("call Uber");
-
-                    mDriverInfo.setVisibility(View.GONE);
-                    mDriverName.setText("");
-                    mDriverPhone.setText("");
-                    mDriverCar.setText("");
-                    mDriverProfileImage.setImageResource(R.mipmap.avatar);
+                    endRide();
 
 
                 } else {
@@ -197,6 +169,7 @@
                 @Override
                 public void onPlaceSelected(Place place) {
                     destination = place.getName().toString();
+                    destinationLatLng = place.getLatLng();
                 }
 
                 @Override
@@ -242,10 +215,13 @@
                                     HashMap map = new HashMap();
                                     map.put("customerRideId", customerId);
                                     map.put("destination", destination);
+                                    map.put("destinationLat", destinationLatLng.latitude);
+                                    map.put("destinationLng", destinationLatLng.longitude);
                                     driverRef.updateChildren(map);
 
                                     getDriverLocation();
                                     getDriverInfo();
+                                    getHasRideEnded();
                                     mRequest.setText("Looking for Driver Location...");
                                 }
                             }
@@ -368,6 +344,64 @@
         });
     }
 
+    private DatabaseReference driveHasEndedRef;
+    private ValueEventListener driveHasEndedRefListener;
+
+    private void getHasRideEnded(){
+        driveHasEndedRef = FirebaseDatabase.getInstance().getReference().child("Users").child("Drivers").child(driverFoundID).child("customerRequest").child("customerRideId");
+        driveHasEndedRefListener = driveHasEndedRef.addValueEventListener(new ValueEventListener() {
+            @Override
+            public void onDataChange(DataSnapshot dataSnapshot) {
+                if(dataSnapshot.exists()){
+
+                } else {
+                    endRide();
+                }
+            }
+
+            @Override
+            public void onCancelled(DatabaseError databaseError) {
+            }
+        });
+    }
+
+    private void endRide(){
+        requestBol = false;
+        geoQuery.removeAllListeners();
+        driverLocationRef.removeEventListener(driverLocationRefListener);
+        driveHasEndedRef.removeEventListener(driveHasEndedRefListener);
+
+        if (driverFoundID != null) {
+            DatabaseReference driverRef = FirebaseDatabase.getInstance().getReference().child("Users").child("Drivers").child(driverFoundID).child("customerRequest");
+            driverRef.removeValue();
+            driverFoundID = null;
+        }
+        driverFound = false;
+        radius = 1;
+        String userId = FirebaseAuth.getInstance().getCurrentUser().getUid();
+
+        DatabaseReference ref = FirebaseDatabase.getInstance().getReference("customerRequest");
+        GeoFire geoFire = new GeoFire(ref);
+        geoFire.removeLocation(userId);
+
+        if (mDriverMarker != null) {
+            mDriverMarker.remove();
+        }
+
+        if (pickupMarker != null) {
+            pickupMarker.remove();
+        }
+
+
+        mRequest.setText("call Uber");
+
+        mDriverInfo.setVisibility(View.GONE);
+        mDriverName.setText("");
+        mDriverPhone.setText("");
+        mDriverCar.setText("");
+        mDriverProfileImage.setImageResource(R.mipmap.avatar);
+    }
+
     @Override
     public void onMapReady(GoogleMap googleMap) {
         mMap = googleMap;
